package com.mine.chapter04.practice;

/**
 * @author CaoY
 * @date 2023-09-10 14:41
 * @description 练习 4.24
 * 如何能够在 AVL 树中实现非懒惰删除。
 *
 * 注：AVL 树的删除有非懒惰删除和懒惰删除两种
 *  1. 非懒惰删除（Eager Deletion）：
 *      1）非懒惰删除是指在执行删除操作时立即删除节点，并且立即进行平衡调整。
 *      2）在非懒惰删除中，删除一个节点后，会立即检查并修复可能导致树不平衡的情况。
 *      3）这种删除方式保证了AVL树的平衡性，但可能需要更多的操作来维护平衡，因为每次删除操作都会引发树的重新平衡。
 *
 *  2. 懒惰删除（Lazy Deletion）：
 *      1）懒惰删除是指在执行删除操作时，并不立即删除节点，而是将节点标记为"删除"状态，但仍然保留在树中。
 *      2）在懒惰删除中，删除操作不会立即触发平衡调整，只有当进行其他操作（如插入或查找等）时才会进行平衡调整。
 *      3）这种删除方式延迟了平衡调整的执行，减少了频繁的平衡调整操作，从而提高了删除操作的效率。
 *      然而，懒惰删除可能导致树结构变得不平衡，因此需要定期进行维护操作。
 * 回答：
 *  已经实现了非懒惰删除，可以查看 AVLTree 中的 remove 方法
 */
public class Solution04_24 {

    public static void main(String[] args) {
        System.out.println("remove 方法之前就参照书中的写法实现了，可以阅读书 P93 - P94");
    }
}
